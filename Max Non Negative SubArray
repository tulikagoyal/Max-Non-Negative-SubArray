Given an array of integers, A of length N, find out the maximum sum sub-array of non negative numbers from A.

The sub-array should be contiguous i.e., a sub-array created by choosing the second and fourth element and skipping the third element is invalid.

Maximum sub-array is defined in terms of the sum of the elements in the sub-array.

Find and return the required subarray.

NOTE:

    1. If there is a tie, then compare with segment's length and return segment which has maximum length.
    2. If there is still a tie, then return the segment with minimum starting index.


Input Format:

The first and the only argument of input contains an integer array A, of length N.
Output Format:

Return an array of integers, that is a subarray of A that satisfies the given conditions.
Constraints:

1 <= N <= 1e5
1 <= A[i] <= 1e5
Examples:

Input 1:
    A = [1, 2, 5, -7, 2, 3]

Output 1:
    [1, 2, 5]

Explanation 1:
    The two sub-arrays are [1, 2, 5] [2, 3].
    The answer is [1, 2, 5] as its sum is larger than [2, 3].

Input 2:
    A = [10, -1, 2, 3, -4, 100]
    
Output 2:
    [100]

Explanation 2:
    The three sub-arrays are [10], [2, 3], [100].
    The answer is [100] as its sum is larger than the other two.
    
SOLUTION : 

vector<int> Solution::maxset(vector<int> &A) {
    int n=A.size();
    int start=0;
    int end=-1;
    int start1=-1;
    int end1=-1;
    long long sum=0;
    long long int actualsum=-1;
    for(int i=0;i<n;i++){
        if(A[i]>=0){
            end=i;
            sum+=A[i];
        }
        else {
            if(actualsum<sum){
                actualsum=sum;
                start1=start;
                end1=end;
                sum=0;
                start=i+1;
            }
            sum=0;
            start=i+1;
        }
    }
    if(actualsum<sum){
        actualsum=sum;
        start1=start;
        end1=end;
    }
    vector<int> v;
    if(start1>=0 && end1>=0){
        for(int i=start1;i<=end1;i++){
            v.push_back(A[i]);
        }
    }
    if(start1==-1 || end1==-1) return v;
    return v;
}
